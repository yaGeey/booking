services:
  server:
    build: 
      context: ./server  
      dockerfile: Dockerfile.dev
    ports:
      - "8080:8080"
    stdin_open: true
    tty: true  # Keeps the container running for debugging
    depends_on:
      postgres_db:
        condition: service_healthy
    env_file:
      - ./server/.env
    networks:
      - prisma-network
    volumes:
      - ./server:/app
      - /app/node_modules

  postgres_db:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    hostname: postgres_db
    container_name: postgres_db_dev
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1212
      POSTGRES_DB: booking
      TZ: Europe/Kyiv
    volumes:
      - ./init:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - prisma-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d booking"]
      interval: 5s
      timeout: 2s
      retries: 20

  client:
    build: 
      context: ./client
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    stdin_open: true
    tty: true
    env_file:
      - ./client/.env
    networks:
      - prisma-network
    volumes:
      - ./client:/app
      - /app/node_modules
    command: npm run dev

  redis:
    image: redis:latest
    container_name: redis_dev
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - prisma-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 5

  worker:
    build: 
      context: ./server  
      dockerfile: Dockerfile.dev
    stdin_open: true
    tty: true
    depends_on:
      postgres_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./server/.env
    networks:
      - prisma-network
    volumes:
      - ./server:/app
      - /app/node_modules
    command: npm run worker:all

networks:
  prisma-network:
    name: prisma-network
    driver: bridge
    external: true

volumes:
  postgres_data:
    # driver: local
    name: postgres_data
    external: true

  redis_data:
    name: redis_data
    external: true

  # prisma_data:
  #   driver: local