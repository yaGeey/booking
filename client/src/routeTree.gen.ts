/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as TestIndexImport } from './routes/test/index'
import { Route as RoomsIndexImport } from './routes/rooms/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as RoomsRoomIdImport } from './routes/rooms/$roomId'
import { Route as AuthRegisterImport } from './routes/auth/register'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as AuthResetPasswordIndexImport } from './routes/auth/reset-password/index'
import { Route as AuthResetPasswordUserIdImport } from './routes/auth/reset-password/$userId'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TestIndexRoute = TestIndexImport.update({
  id: '/test/',
  path: '/test/',
  getParentRoute: () => rootRoute,
} as any)

const RoomsIndexRoute = RoomsIndexImport.update({
  id: '/rooms/',
  path: '/rooms/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRoute,
} as any)

const RoomsRoomIdRoute = RoomsRoomIdImport.update({
  id: '/rooms/$roomId',
  path: '/rooms/$roomId',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthResetPasswordIndexRoute = AuthResetPasswordIndexImport.update({
  id: '/auth/reset-password/',
  path: '/auth/reset-password/',
  getParentRoute: () => rootRoute,
} as any)

const AuthResetPasswordUserIdRoute = AuthResetPasswordUserIdImport.update({
  id: '/auth/reset-password/$userId',
  path: '/auth/reset-password/$userId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof rootRoute
    }
    '/rooms/$roomId': {
      id: '/rooms/$roomId'
      path: '/rooms/$roomId'
      fullPath: '/rooms/$roomId'
      preLoaderRoute: typeof RoomsRoomIdImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof rootRoute
    }
    '/rooms/': {
      id: '/rooms/'
      path: '/rooms'
      fullPath: '/rooms'
      preLoaderRoute: typeof RoomsIndexImport
      parentRoute: typeof rootRoute
    }
    '/test/': {
      id: '/test/'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestIndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/reset-password/$userId': {
      id: '/auth/reset-password/$userId'
      path: '/auth/reset-password/$userId'
      fullPath: '/auth/reset-password/$userId'
      preLoaderRoute: typeof AuthResetPasswordUserIdImport
      parentRoute: typeof rootRoute
    }
    '/auth/reset-password/': {
      id: '/auth/reset-password/'
      path: '/auth/reset-password'
      fullPath: '/auth/reset-password'
      preLoaderRoute: typeof AuthResetPasswordIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/rooms/$roomId': typeof RoomsRoomIdRoute
  '/dashboard': typeof DashboardIndexRoute
  '/rooms': typeof RoomsIndexRoute
  '/test': typeof TestIndexRoute
  '/auth/reset-password/$userId': typeof AuthResetPasswordUserIdRoute
  '/auth/reset-password': typeof AuthResetPasswordIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/rooms/$roomId': typeof RoomsRoomIdRoute
  '/dashboard': typeof DashboardIndexRoute
  '/rooms': typeof RoomsIndexRoute
  '/test': typeof TestIndexRoute
  '/auth/reset-password/$userId': typeof AuthResetPasswordUserIdRoute
  '/auth/reset-password': typeof AuthResetPasswordIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/rooms/$roomId': typeof RoomsRoomIdRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/rooms/': typeof RoomsIndexRoute
  '/test/': typeof TestIndexRoute
  '/auth/reset-password/$userId': typeof AuthResetPasswordUserIdRoute
  '/auth/reset-password/': typeof AuthResetPasswordIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/rooms/$roomId'
    | '/dashboard'
    | '/rooms'
    | '/test'
    | '/auth/reset-password/$userId'
    | '/auth/reset-password'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/rooms/$roomId'
    | '/dashboard'
    | '/rooms'
    | '/test'
    | '/auth/reset-password/$userId'
    | '/auth/reset-password'
  id:
    | '__root__'
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/rooms/$roomId'
    | '/dashboard/'
    | '/rooms/'
    | '/test/'
    | '/auth/reset-password/$userId'
    | '/auth/reset-password/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  RoomsRoomIdRoute: typeof RoomsRoomIdRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  RoomsIndexRoute: typeof RoomsIndexRoute
  TestIndexRoute: typeof TestIndexRoute
  AuthResetPasswordUserIdRoute: typeof AuthResetPasswordUserIdRoute
  AuthResetPasswordIndexRoute: typeof AuthResetPasswordIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  RoomsRoomIdRoute: RoomsRoomIdRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  RoomsIndexRoute: RoomsIndexRoute,
  TestIndexRoute: TestIndexRoute,
  AuthResetPasswordUserIdRoute: AuthResetPasswordUserIdRoute,
  AuthResetPasswordIndexRoute: AuthResetPasswordIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth/login",
        "/auth/register",
        "/rooms/$roomId",
        "/dashboard/",
        "/rooms/",
        "/test/",
        "/auth/reset-password/$userId",
        "/auth/reset-password/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/register": {
      "filePath": "auth/register.tsx"
    },
    "/rooms/$roomId": {
      "filePath": "rooms/$roomId.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx"
    },
    "/rooms/": {
      "filePath": "rooms/index.tsx"
    },
    "/test/": {
      "filePath": "test/index.tsx"
    },
    "/auth/reset-password/$userId": {
      "filePath": "auth/reset-password/$userId.tsx"
    },
    "/auth/reset-password/": {
      "filePath": "auth/reset-password/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
