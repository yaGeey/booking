// npx prisma migrate dev --name aboba
generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String          @id @default(uuid())
  name        String
  email       String          @unique
  role        Role            @default(USER)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  avatar      String?
  avatarColor String
  password    String?
  salt        String?
  provider    oAuthProviders?
  providerId  String?         @unique
  lastSeen    DateTime?       @default(now())

  ownedRooms       Room[]             @relation("Owned")
  rooms            Room[]
  messages         Message[]
  passwordResetPin PasswordResetPin[]
  reactions        Reaction[]
  viewedMessages   MessageViewedBy[] // TODO TEST delete after week with cronjob
  messsageReports  MesssageReport[]
  messageForwards  MessageForward[]
}

enum Role {
  USER
  ADMIN
}

enum oAuthProviders {
  discord
  google
}

model Room {
  id           String    @id @default(uuid())
  title        String? // can't make it required don't know why, ts error
  desc         String?
  isPrivate    Boolean   @default(false)
  password     String?
  emailDomains String[]
  capacity     Int?
  scheduleAt   DateTime?
  durationMin  Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  messages     Message[]
  owner        User      @relation("Owned", fields: [ownerId], references: [id])
  ownerId      String
  participants User[]

  forwardedFrom MessageForward[] @relation("RoomForwardedFrom")
  forwardedTo   MessageForward[] @relation("RoomForwardedTo")
}

// isRecurring: z.boolean().optional(), // add

// TODO edit, delete, pin, report, reply!.. react, forward
model Message {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isEdited     Boolean   @default(false)
  lastEditedAt DateTime?
  isDeleted    Boolean   @default(false)
  deletedAt    DateTime?
  isPinned     Boolean   @default(false)

  room   Room   @relation(fields: [roomId], references: [id])
  roomId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  isViewed Boolean           @default(false)
  viewedBy MessageViewedBy[]

  reactions  Reaction[]
  isReported Boolean          @default(false)
  reports    MesssageReport[]

  replyTo   Message?         @relation("MessageReply", fields: [replyToId], references: [id])
  replyToId String?
  replies   Message[]        @relation("MessageReply")
  forwarded MessageForward[]

  @@index([isViewed])
  @@index([isDeleted])
  @@index([roomId])
}

model MessageForward {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  isDirect  Boolean  @default(false) // if true, then message is forwarded to another user, not room

  message    Message @relation(fields: [messageId], references: [id])
  messageId  String
  user       User    @relation(fields: [userId], references: [id])
  userId     String
  from       Room    @relation("RoomForwardedFrom", fields: [fromRoomId], references: [id])
  fromRoomId String
  to         Room    @relation("RoomForwardedTo", fields: [toRoomId], references: [id])
  toRoomId   String

  @@index([messageId])
}

model PasswordResetPin {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  pin       String
  createdAt DateTime @default(now())
  expiresAt DateTime
  used      Boolean  @default(false)
}

// TODO bellow - implement
model Reaction {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
}

model MessageViewedBy {
  id        String   @id @default(uuid())
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([messageId, userId])
  @@index([messageId])
}

model MesssageReport {
  id        String        @id @default(uuid())
  reason    ReportReasons
  message   Message       @relation(fields: [messageId], references: [id])
  messageId String
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime      @default(now())
  // @@index([messageId])
  // @@index([userId])

  @@unique([messageId, userId])
}

enum ReportReasons {
  spam
  harassment
  hateSpeech
  nudityOrSexualContent
  violenceOrThreats
  misinformation
  scamOrFraud
  selfHarmOrSuicide
  impersonation
  other
}
